package raw.executor.spark.inputformats.nifti

/**
  * Created by dperez on 05.05.17.
  *
  * NiftiFormatCodeGenBuilder
  *
  * Generate code to create an "NiftiInputFormat" class (extends RawInputFormat),
  * It contains a "createRecordReader" function that returns a NiftiRecordReader.
  *
  * The NiftiRecordReader class code is generated by NiftiRecordParserBuilder
  *
  */

import java.util.concurrent.atomic.AtomicInteger

import raw.compiler.base.source.Type
import raw.compiler.common.source.FunAbs
import raw.executor.spark.CodeGenContext
import raw.inputformats.InputFormatDescriptor


object NiftiFormatCodeGenBuilder {
  private val ai = new AtomicInteger()

  def buildCode(options: InputFormatDescriptor, projectedType: Type, fullType: Type,
                maybeColumns: Option[Vector[String]], maybePredicate: Option[FunAbs])
               (implicit codeGenContext: CodeGenContext): String = {
    assert(maybePredicate.isEmpty, "unexpected predicate push down")
    codeGenContext.addImport("raw.inputformats.nifti.NiftiHeader")
    codeGenContext.addImport("raw.runtime.inputformats._")
    codeGenContext.addImport("raw.runtime.inputformats.nifti._")
    codeGenContext.addImport("java.io.InputStream")
    codeGenContext.addImport("java.io.DataInput")

    codeGenContext.getOrElseGenerateAndUpdate(
      options.formatId,
      ("hadoop", projectedType, options),
      build(options, projectedType))
  }

  private[this] def build(options: InputFormatDescriptor, projectedType: Type)(implicit codeGenContext: CodeGenContext): String = {
    val classAndCode = NiftiRecordParserBuilder(options, projectedType)
    val recordParserClassName = classAndCode.className

    // create an input format name
    val id = NiftiFormatCodeGenBuilder.ai.getAndIncrement()
    val inputFormatTypeName = "NiftiInputFormat" + id

    val scalaTypeName = codeGenContext.buildType(projectedType)

    // generate input format class code
    val codeGenBlock =
      s"""class $inputFormatTypeName extends RawInputFormat[$scalaTypeName](false) {
         |  override def createRecordReader(split: InputSplit, context: TaskAttemptContext): RecordReader[NullWritable, $scalaTypeName] = {
         |    val recordParser = new ${recordParserClassName}()
         |    new NiftiRecordReader(recordParser)
         |  }
         |}
         |""".stripMargin

    codeGenContext.addClass(inputFormatTypeName, codeGenBlock)
    s"""new HadoopScanner(classOf[$inputFormatTypeName], classOf[$scalaTypeName])"""
  }


  def buildCodeForDropbox(options: InputFormatDescriptor, projectedType: Type, fullType: Type,
                          maybeColumns: Option[Vector[String]], maybePredicate: Option[FunAbs])
                         (implicit codeGenContext: CodeGenContext): String = {
    assert(maybePredicate.isEmpty, "unexpected predicate push down")

    codeGenContext.addImport("raw.runtime.inputformats._")
    codeGenContext.addImport("raw.inputformats.nifti.NiftiHeader")
    codeGenContext.addImport("raw.runtime.inputformats._")
    codeGenContext.addImport("raw.runtime.inputformats.nifti._")
    codeGenContext.addImport("java.io.InputStream")

    codeGenContext.getOrElseGenerateAndUpdate(
      options.formatId,
      ("dropbox", projectedType, options),
      buildDropbox(options, projectedType))
  }

  private[this] def buildDropbox(df: InputFormatDescriptor, projectedType: Type)(implicit codeGenContext: CodeGenContext): String = {
    val classAndCode = NiftiRecordParserBuilder(df, projectedType)
    val recordParserClassName = classAndCode.className

    // create an input format name
    val id = NiftiFormatCodeGenBuilder.ai.getAndIncrement()
    val inputFormatTypeName = "NiftiInputFormat" + id

    val scalaTypeName = codeGenContext.buildType(projectedType)

    // generate input format class code
    val codeGenBlock =
      s"""class $inputFormatTypeName extends RawInputFormat[$scalaTypeName](false) {
         |  override def createRecordReader(split: InputSplit, context: TaskAttemptContext): RecordReader[NullWritable, $scalaTypeName] = {
         |    val recordParser = new ${recordParserClassName}()
         |    new NiftiRecordReader(recordParser)
         |  }
         |}
         |""".stripMargin

    codeGenContext.addClass(inputFormatTypeName, codeGenBlock)
    s"""new HadoopScanner(classOf[$inputFormatTypeName], classOf[$scalaTypeName])"""
  }

}


